{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#concept","title":"Concept","text":"<p>This is a dependency: a regex date formula and decoder for dates referenced in related libraries:</p> <ol> <li>citation-report; and</li> <li>citation-docket.</li> </ol> <p>These two libraries are, in turn, dependencies of citation-utils.</p> <p>These are intended to parse long-form court decisions and documents that contain Philippine Supreme Court citations.</p> <p>This is a separate library to make it easier to test regex strings.</p>"},{"location":"#nature-as-dependency","title":"Nature as Dependency","text":""},{"location":"#report","title":"Report","text":"<p>e.g <code>Report</code> reporters / publishers (e.g. 12 SCRA 141 <code>&lt;date&gt;</code>)</p> <p>See <code>citation-report</code> library on how the <code>report_date</code> group name can be used to fetch matched regex strings</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from citation_date import report_date, decode_date\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile(report_date, re.I | re.X)  # note flags\n&gt;&gt;&gt; text = \"1 SCRA 200 (1Dec.  2000)\" # this is what a report looks like\n&gt;&gt;&gt; match = pattern.search(text)\n&gt;&gt;&gt; match.group(\"report_date\")\n\"(1Dec.  2000)\"\n&gt;&gt;&gt; decode_date(match.group(\"report_date\")) # use the regex group name\n\"2000-12-01\"\n</code></pre>"},{"location":"#docket","title":"Docket","text":"<p>e.g. <code>Docket</code> numbers (e.g. GR No. 1434121, <code>&lt;date&gt;</code>).</p> <p>See <code>citation-docket</code> library on how th  <code>docket_date</code> group name can be used to fetch matched regex strings</p> <ol> <li>Date style is combined with docket citation, e.g. \"G.R. No. 12345, Dec. 1, 2000\"</li> <li>Group name in compiled regex pattern : \"docket_date\"</li> </ol> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from citation_date import docket_date\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile(docket_date, re.I | re.X)  # note flags\n&gt;&gt;&gt; text = \"G.R. No. 12345, Dec,1,  2000\" # this is what a docket looks like\n&gt;&gt;&gt; match = pattern.search(text)\n&gt;&gt;&gt; match.group(\"docket_date\")\n\"Dec,1,  2000\"\n&gt;&gt;&gt; decode_date(match.group(\"docket_date\")) # use the regex group name\n\"December 01, 2000\"\n</code></pre>"},{"location":"#decode-date","title":"Decode Date","text":""},{"location":"#decode_date","title":"decode_date()","text":"<p>Given a piece of text, extract the date found using the specific constraints of Philippine citations.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; text =  \"G.R. No. 12345, Dec,1,  2000\"\n&gt;&gt;&gt; decode_date(text)\n'December 01, 2000'\n&gt;&gt;&gt; text1 = \"The date is (april29,2001)\"\n&gt;&gt;&gt; decode_date(text1)\n'April 29, 2001'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Presumably a date string</p> required <code>is_output_date_object</code> <code>bool</code> <p>If True, the return is a <code>datetime.date</code> object. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str | date | None</code> <p>str | date | None: The decoded text as a date, if it exists.</p> Source code in <code>citation_date/decoder.py</code> Python<pre><code>def decode_date(\ntext: str, is_output_date_object: bool = False\n) -&gt; str | date | None:\n\"\"\"Given a piece of text, extract the date found using the specific\n    constraints of Philippine citations.\n    Examples:\n        &gt;&gt;&gt; text =  \"G.R. No. 12345, Dec,1,  2000\"\n        &gt;&gt;&gt; decode_date(text)\n        'December 01, 2000'\n        &gt;&gt;&gt; text1 = \"The date is (april29,2001)\"\n        &gt;&gt;&gt; decode_date(text1)\n        'April 29, 2001'\n    Args:\n        text (str): Presumably a date string\n        is_output_date_object (bool, optional): If True, the return is a\n            `datetime.date` object. Defaults to False.\n    Returns:\n        str | date | None: The decoded text as a date, if it exists.\n    \"\"\"\nobj = DatedText(text)\nif is_output_date_object:\nreturn obj.as_date\nreturn obj.as_string\n</code></pre>"},{"location":"#pattern","title":"Pattern","text":""},{"location":"#constraints","title":"Constraints","text":"<p>Intended purpose for date pattern matching in Philippine citations:</p> <ol> <li>Limits allowed years: <code>1900 - 2299</code></li> <li>Limits allowed days: <code>1 - 31</code></li> <li>Limits allowed months:<ul> <li><code>Jan.</code></li> <li><code>Dec.</code></li> <li><code>mar</code></li> <li><code>july</code></li> <li><code>Sept</code></li> </ul> </li> <li>Captures UK format: <code>day month, year</code></li> <li>Captures US format: <code>month day, year</code></li> <li>Deals with typographic issues, e.g. lacking space <code>Dec1,2000</code></li> </ol>"},{"location":"#regex-docket_date","title":"Regex: docket_date","text":"<p>This <code>regex</code> string is constructed via <code>docket_date</code></p> Python<pre><code>from citation_date import docket_date\nimport pprint\npprint.pprint(docket_date)\n(\n\"\\n\"\n\"    (?P&lt;docket_date&gt;\\n\"\n\"        \\n\"\n\"(\\n\"\n\"    (\\n\"\n\"    (?:\\n\"\n\"        Jan(?:uary)?|\\n\"\n\"        Feb(?:ruary)?|\\n\"\n\"        Mar(?:ch)?|\\n\"\n\"        Apr(?:il)?|\\n\"\n\"        May|\\n\"\n\"        Jun(?:e)?|\\n\"\n\"        Jul(?:y)?|\\n\"\n\"        Aug(?:ust)?|\\n\"\n\"        Sep(?:tember)?|\\n\"\n\"        Sept|\\n\"\n\"        Oct(?:ober)?|\\n\"\n\"        (Nov|Dec)(?:ember)?\\n\"\n\"    )\\n\"\n\")\\n\"\n\"\\n\"\n\"    [,\\\\.\\\\s]*\\n\"\n\"    \\n\"\n\"    (\\n\"\n\"        ( \\n\"\n\"            ([0]?[1-9])| # 01-09\\n\"\n\"            ([1-2][0-9])| # 10-29\\n\"\n\"            (3[01]) # 30-31\\n\"\n\"        )\\n\"\n\"    )\\n\"\n\"\\n\"\n\"    [,\\\\.\\\\s]*\\n\"\n\"    \\n\"\n\"    (\\n\"\n\"        19[0-9][0-9]| # 1900 to 1999\\n\"\n\"        2[0-2][0-9][0-9] # 2000 to 2299\\n\"\n\"    )\\n\"\n\"    \\\\b # ends with the last digit of the year\\n\"\n\"\\n\"\n\")\\n\"\n\"|\\n\"\n\"(\\n\"\n\"    \\n\"\n\"    (\\n\"\n\"        ( \\n\"\n\"            ([0]?[1-9])| # 01-09\\n\"\n\"            ([1-2][0-9])| # 10-29\\n\"\n\"            (3[01]) # 30-31\\n\"\n\"        )\\n\"\n\"    )\\n\"\n\"\\n\"\n\"    [,\\\\.\\\\s]*\\n\"\n\"    (\\n\"\n\"    (?:\\n\"\n\"        Jan(?:uary)?|\\n\"\n\"        Feb(?:ruary)?|\\n\"\n\"        Mar(?:ch)?|\\n\"\n\"        Apr(?:il)?|\\n\"\n\"        May|\\n\"\n\"        Jun(?:e)?|\\n\"\n\"        Jul(?:y)?|\\n\"\n\"        Aug(?:ust)?|\\n\"\n\"        Sep(?:tember)?|\\n\"\n\"        Sept|\\n\"\n\"        Oct(?:ober)?|\\n\"\n\"        (Nov|Dec)(?:ember)?\\n\"\n\"    )\\n\"\n\")\\n\"\n\"\\n\"\n\"    [,\\\\.\\\\s]*\\n\"\n\"    \\n\"\n\"    (\\n\"\n\"        19[0-9][0-9]| # 1900 to 1999\\n\"\n\"        2[0-2][0-9][0-9] # 2000 to 2299\\n\"\n\"    )\\n\"\n\"    \\\\b # ends with the last digit of the year\\n\"\n\"\\n\"\n\")\\n\"\n\"\\n\"\n\"    )\\n\"\n)\n</code></pre>"}]}