{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Purpose","text":"<p>This is a dependency: a regex date formula and decoder for dates referenced in related libraries:</p> <ol> <li>citation-report; and</li> <li>citation-docket.</li> </ol> <p>These two libraries are intended to parse long-form court decisions and documents that contain Philippine Supreme Court citations referencing:</p> <ol> <li>reporters / publishers (e.g. 12 SCRA 141 <code>&lt;date&gt;</code>); and</li> <li>docket numbers (e.g. GR No. 1434121, <code>&lt;date&gt;</code>).</li> </ol> <p>The date is used as an anchor to capture the citation, when possible. Some features of this particular package:</p> <ol> <li>Limits allowed years: <code>1900 - 2299</code></li> <li>Limits allowed days: <code>1 - 31</code></li> <li>Limits allowed months:<ul> <li><code>Jan.</code></li> <li><code>Dec.</code></li> <li><code>mar</code></li> <li><code>july</code></li> <li><code>Sept</code></li> </ul> </li> <li>Captures UK format: <code>day month, year</code></li> <li>Captures US format: <code>month day, year</code></li> <li>Deals with typographic issues, e.g. lacking space <code>Dec1,2000</code></li> </ol>"},{"location":"explanation/","title":"Explanation","text":""},{"location":"explanation/#sample-regex","title":"Sample Regex","text":"<p>This <code>regex</code> string is constructed via <code>docket_date</code></p> <pre><code>from citation_date import docket_date\nimport pprint\n\npprint.pprint(docket_date)  # see regex string that is constructed\n(\n    \"\\n\"\n    \"    (?P&lt;docket_date&gt;\\n\"\n    \"        \\n\"\n    \"(\\n\"\n    \"    (\\n\"\n    \"    (?:\\n\"\n    \"        Jan(?:uary)?|\\n\"\n    \"        Feb(?:ruary)?|\\n\"\n    \"        Mar(?:ch)?|\\n\"\n    \"        Apr(?:il)?|\\n\"\n    \"        May|\\n\"\n    \"        Jun(?:e)?|\\n\"\n    \"        Jul(?:y)?|\\n\"\n    \"        Aug(?:ust)?|\\n\"\n    \"        Sep(?:tember)?|\\n\"\n    \"        Sept|\\n\"\n    \"        Oct(?:ober)?|\\n\"\n    \"        (Nov|Dec)(?:ember)?\\n\"\n    \"    )\\n\"\n    \")\\n\"\n    \"\\n\"\n    \"    [,\\\\.\\\\s]*\\n\"\n    \"    \\n\"\n    \"    (\\n\"\n    \"        ( \\n\"\n    \"            ([0]?[1-9])| # 01-09\\n\"\n    \"            ([1-2][0-9])| # 10-29\\n\"\n    \"            (3[01]) # 30-31\\n\"\n    \"        )\\n\"\n    \"    )\\n\"\n    \"\\n\"\n    \"    [,\\\\.\\\\s]*\\n\"\n    \"    \\n\"\n    \"    (\\n\"\n    \"        19[0-9][0-9]| # 1900 to 1999\\n\"\n    \"        2[0-2][0-9][0-9] # 2000 to 2299\\n\"\n    \"    )\\n\"\n    \"    \\\\b # ends with the last digit of the year\\n\"\n    \"\\n\"\n    \")\\n\"\n    \"|\\n\"\n    \"(\\n\"\n    \"    \\n\"\n    \"    (\\n\"\n    \"        ( \\n\"\n    \"            ([0]?[1-9])| # 01-09\\n\"\n    \"            ([1-2][0-9])| # 10-29\\n\"\n    \"            (3[01]) # 30-31\\n\"\n    \"        )\\n\"\n    \"    )\\n\"\n    \"\\n\"\n    \"    [,\\\\.\\\\s]*\\n\"\n    \"    (\\n\"\n    \"    (?:\\n\"\n    \"        Jan(?:uary)?|\\n\"\n    \"        Feb(?:ruary)?|\\n\"\n    \"        Mar(?:ch)?|\\n\"\n    \"        Apr(?:il)?|\\n\"\n    \"        May|\\n\"\n    \"        Jun(?:e)?|\\n\"\n    \"        Jul(?:y)?|\\n\"\n    \"        Aug(?:ust)?|\\n\"\n    \"        Sep(?:tember)?|\\n\"\n    \"        Sept|\\n\"\n    \"        Oct(?:ober)?|\\n\"\n    \"        (Nov|Dec)(?:ember)?\\n\"\n    \"    )\\n\"\n    \")\\n\"\n    \"\\n\"\n    \"    [,\\\\.\\\\s]*\\n\"\n    \"    \\n\"\n    \"    (\\n\"\n    \"        19[0-9][0-9]| # 1900 to 1999\\n\"\n    \"        2[0-2][0-9][0-9] # 2000 to 2299\\n\"\n    \"    )\\n\"\n    \"    \\\\b # ends with the last digit of the year\\n\"\n    \"\\n\"\n    \")\\n\"\n    \"\\n\"\n    \"    )\\n\"\n)\n</code></pre>"},{"location":"explanation/#regex-in-citation-docket","title":"Regex in citation-docket","text":"<ol> <li>Date style is combined with docket citation, e.g. \"G.R. No. 12345, Dec. 1, 2000\"</li> <li>Variable name is <code>docket_date</code>, import from <code>citation_date</code></li> <li>Group name in compiled regex pattern : \"docket_date\"</li> <li>See raw regex string below, compiled into <code>Pattern</code> object for matching</li> </ol> <pre><code>from citation_date import docket_date\nimport re\n\npattern = re.compile(docket_date, re.I | re.X)  # note flags\ntext = \"G.R. No. 12345, Dec,1,  2000\"\nmatch = pattern.search(text)\nmatch.group(\"docket_date\")\n\"Dec,1,  2000\"\ndecode_date(match.group(\"docket_date\"))\n\"December 01, 2000\"\n</code></pre>"},{"location":"explanation/#regex-in-citation-report","title":"Regex in citation-report","text":"<ol> <li>Date style is combined with report citation, e.g. \"1 SCRA 200 (2000)\" or \"1 SCRA 200 (Dec. 1, 2000)\"</li> <li>Variable name is <code>report_date</code>, import from <code>citation_date</code></li> <li>Group name in compiled regex pattern : \"report_date\"</li> <li>Raw regex too long: includes naked variant, parenthesis variant \"()\", and bracket dates \"[]\"</li> <li>Raw regex compiled below into <code>Pattern</code> object for matching</li> </ol> <pre><code>from citation_date import report_date, decode_date\nimport re\n\npattern = re.compile(report_date, re.I | re.X)  # note flags\ntext = \"1 SCRA 200 (1Dec.  2000)\"\nmatch = pattern.search(text)\nmatch.group(\"report_date\")\n\"(1Dec.  2000)\"\ndecode_date(match.group(\"report_date\"))\n\"2000-12-01\"\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#citation_date.decoder.DatedText","title":"<code>DatedText</code>  <code>dataclass</code>","text":"<p>Uses custom regex for matching date-like objects to deal with common typos in citations.</p> Source code in <code>citation_date/decoder.py</code> <pre><code>@dataclass\nclass DatedText:\n\"\"\"Uses custom regex for matching date-like objects to deal\n    with common typos in citations.\"\"\"\n\n    raw: str\n    match: Match | None = None\n    text: str | None = None\n    dated: date | None = None\n\n    def __post_init__(self):\n        self.match = POSSIBLE_DATE.search(self.raw)\n        self.text = self.US or self.UK if self.match else None\n        if self.text:\n            try:\n                self.as_date = parse(self.text).date()\n                self.as_string = self.as_date.strftime(\"%B %d, %Y\")\n            except Exception:\n                self.as_date = None\n                self.as_string = None\n\n    @property\n    def US(self) -&gt; str | None:\n\"\"\"If the US variant is found, return the date string.\n\n        Returns:\n            str | None: Date in the format: `M D, Y`, if found.\n        \"\"\"\n        if self.match and self.match.group(\"us_day\"):\n            day = self.match.group(\"us_day\")\n            month = self.match.group(\"us_month\")\n            year = self.match.group(\"us_year\")\n            return f\"{month} {day}, {year}\"\n        return None\n\n    @property\n    def UK(self) -&gt; str | None:\n\"\"\"If the UK variant is found, return the date string.\n\n        Returns:\n            str | None: Date in the format: `M D, Y`, if found.\n        \"\"\"\n        if self.match and self.match.group(\"uk_day\"):\n            day = self.match.group(\"uk_day\")\n            month = self.match.group(\"uk_month\")\n            year = self.match.group(\"uk_year\")\n            return f\"{month} {day}, {year}\"\n        return None\n</code></pre>"},{"location":"reference/#citation_date.decoder.DatedText.UK","title":"<code>UK: str | None</code>  <code>property</code>","text":"<p>If the UK variant is found, return the date string.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: Date in the format: <code>M D, Y</code>, if found.</p>"},{"location":"reference/#citation_date.decoder.DatedText.US","title":"<code>US: str | None</code>  <code>property</code>","text":"<p>If the US variant is found, return the date string.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: Date in the format: <code>M D, Y</code>, if found.</p>"},{"location":"reference/#citation_date.decoder.decode_date","title":"<code>decode_date(text, is_output_date_object=False)</code>","text":"<p>Given a piece of text, extract the date found.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Presumably a date string</p> required <code>is_output_date_object</code> <code>bool</code> <p>If True, the return is a <code>datetime.date</code> object. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str | date | None</code> <p>str | date | None: The decoded text as a date, if it exists.</p> Source code in <code>citation_date/decoder.py</code> <pre><code>def decode_date(\n    text: str, is_output_date_object: bool = False\n) -&gt; str | date | None:\n\"\"\"Given a piece of text, extract the date found.\n\n    Args:\n        text (str): Presumably a date string\n        is_output_date_object (bool, optional): If True, the return is a\n            `datetime.date` object. Defaults to False.\n\n    Returns:\n        str | date | None: The decoded text as a date, if it exists.\n    \"\"\"\n    obj = DatedText(text)\n    if is_output_date_object:\n        return obj.as_date\n    return obj.as_string\n</code></pre>"}]}